using Microsoft.Data.SqlClient;
using Microsoft.Data.Sqlite;
using Modular.Core.Audit;
using Modular.Core.Databases;
using Modular.Core.Utility;
using Syncfusion.XlsIO;
using System.Data;

namespace Modular.Core.Exporter
{
    public class DataExporterItem
    {

        #region "  Constructors  "

        public DataExporterItem()
        {
            _FileName = "Unknown";
            _FilePath = "Unknown";
        }

        public DataExporterItem(FileInfo File)
        {
            using (StreamReader StreamReader = new StreamReader(File.FullName))
            {
                _File = File;
                _FileName = File.Name;
                _FilePath = File.FullName;
                _FileScript = StreamReader.ReadToEnd();

                do
                {
                    string ScriptLine = StreamReader.ReadLine();
                    if (ScriptLine.StartsWith("-- "))
                    {
                        string[] SplitScriptLine = ScriptLine.Split(new string[] { "-- " }, StringSplitOptions.None);
                        if (SplitScriptLine.Length > 1)
                        {
                            string[] SplitScriptLine2 = SplitScriptLine[1].Split(new string[] { ": " }, StringSplitOptions.None);
                            if (SplitScriptLine2.Length > 1)
                            {
                                switch (SplitScriptLine2[0].ToUpper())
                                {
                                    case "NAME":
                                        _Name = SplitScriptLine2[1];
                                        break;

                                    case "DESCRIPTION":
                                        _Description = SplitScriptLine2[1];
                                        break;

                                    case "CATEGORY":
                                        _Category = SplitScriptLine2[1];
                                        break;
                                }
                            }
                        }
                    }
                } while (!StreamReader.EndOfStream);
            }
        }

        #endregion

        #region "  Variables  "

        private FileInfo _File;

        private string _FileName = string.Empty;

        private string _FilePath = string.Empty;

        private string _FileScript = string.Empty;

        private string _Name = string.Empty;

        private string _Description = string.Empty;

        private string _Category = string.Empty;

        #endregion

        #region "  Properties  "

        public string FileName
        {
            get
            {
                return _FileName;
            }
        }

        public string FilePath
        {
            get
            {
                return _FilePath;
            }
        }

        public string FileScript
        {
            get
            {
                return _FileScript;
            }
        }

        public string Name
        {
            get
            {
                return _Name;
            }
        }

        public string Description
        {
            get
            {
                return _Description;
            }
        }

        public string Category
        {
            get
            {
                return _Category;
            }
        }

        #endregion

        #region "  Public Methods  "

        public void Excecute()
        {
            if (Database.CheckDatabaseConnection())
            {
                switch (Database.ConnectionMode)
                {
                    case Database.DatabaseConnectivityMode.Remote:
                        using (SqlConnection Connection = new SqlConnection())
                        {
                            Connection.Open();

                            using (SqlCommand Command = new SqlCommand())
                            {
                                Command.Connection = Connection;
                                Command.CommandType = CommandType.Text;
                                Command.CommandText = File.ReadAllText(FilePath);


                                using (SqlDataReader DataReader = Command.ExecuteReader())
                                {
                                    ExportToFile(DataReader);

                                }
                            }
                            Connection.Close();
                        }
                        AuditLog.Create(ObjectTypes.ObjectType.DataExporter, Guid.Empty, $"Exporter: {Name} was generated by user {SystemCore.Context.Identity.Username}");
                        break;

                    case Database.DatabaseConnectivityMode.Local:
                        using (SqliteConnection Connection = new SqliteConnection())
                        {
                            Connection.Open();

                            using (SqliteCommand Command = new SqliteCommand())
                            {
                                Command.Connection = Connection;
                                Command.CommandType = CommandType.Text;
                                Command.CommandText = File.ReadAllText(Name);

                                using (SqliteDataReader DataReader = Command.ExecuteReader())
                                {
                                    ExportToFile(DataReader);

                                }
                            }
                            Connection.Close();
                        }
                        AuditLog.Create(ObjectTypes.ObjectType.DataExporter, Guid.Empty, $"Exporter: {Name} was generated by user {SystemCore.Context.Identity.Username}");
                        break;
                }
            }
            else
            {
                throw new ModularException(ExceptionType.DatabaseConnectionError, "Database connection is not available.");
            }
        }

        #endregion

        #region "  Private Methods  "

        private void ExportToFile(SqlDataReader DataReader)
        {
            try
            {
                using (ExcelEngine ExcelEngine = new ExcelEngine())
                {
                    Syncfusion.XlsIO.IApplication ExcelApplication = ExcelEngine.Excel;
                    ExcelApplication.DefaultVersion = ExcelVersion.Xlsx;


                    // Create a new workbook
                    IWorkbook ExcelWorkbook = ExcelApplication.Workbooks.Create();

                    // Access first worksheet from the workbook instance.
                    IWorksheet ExcelWorksheet = ExcelWorkbook.Worksheets[0];

                    int RowIndex = 1;

                    // Set the column headers
                    for (int ColumnIndex = 0; ColumnIndex < DataReader.FieldCount; ColumnIndex++)
                    {
                        ExcelWorksheet[RowIndex, ColumnIndex + 1].Text = DataReader.GetName(ColumnIndex);
                    }

                    // Set the data
                    while (DataReader.Read())
                    {
                        RowIndex++;
                        for (int ColumnIndex = 0; ColumnIndex < DataReader.FieldCount; ColumnIndex++)
                        {
                            ExcelWorksheet[RowIndex, ColumnIndex + 1].Text = DataReader.GetValue(ColumnIndex).ToString();
                        }
                    }

                    // Save the workbook to disk in xlsx format
                    ExcelWorkbook.SaveAs(ModularUtils.ConvertFileToStream($"{DataExporter.ExportFolder.FullName}\\{DateTime.Now:yyyy-MM-dd HH:mm} {Name}.xlsx"));
                    ExcelWorkbook.Close();
                }
            }
            catch
            {
                throw new ModularException(ExceptionType.ExecutionOfScriptFailed, $"Exporter: Script failed to export to file.");
            }
        }

        private void ExportToFile(SqliteDataReader DataReader)
        {
            using (ExcelEngine ExcelEngine = new ExcelEngine())
            {
                Syncfusion.XlsIO.IApplication ExcelApplication = ExcelEngine.Excel;
                ExcelApplication.DefaultVersion = ExcelVersion.Xlsx;


                // Create a new workbook
                IWorkbook ExcelWorkbook = ExcelApplication.Workbooks.Create();

                // Access first worksheet from the workbook instance.
                IWorksheet ExcelWorksheet = ExcelWorkbook.Worksheets[0];

                int RowIndex = 1;

                // Set the column headers
                for (int ColumnIndex = 0; ColumnIndex < DataReader.FieldCount; ColumnIndex++)
                {
                    ExcelWorksheet[RowIndex, ColumnIndex + 1].Text = DataReader.GetName(ColumnIndex);
                }

                // Set the data
                while (DataReader.Read())
                {
                    RowIndex++;
                    for (int ColumnIndex = 0; ColumnIndex < DataReader.FieldCount; ColumnIndex++)
                    {
                        ExcelWorksheet[RowIndex, ColumnIndex + 1].Text = DataReader.GetValue(ColumnIndex).ToString();
                    }
                }

                // Save the workbook to disk in xlsx format
                ExcelWorkbook.SaveAs(ModularUtils.ConvertFileToStream($"{DataExporter.ExportFolder.FullName}\\{DateTime.Now:yyyy-MM-dd HH:mm} {Name}.xlsx"));
                ExcelWorkbook.Close();
            }
        }

        #endregion

    }
}
